#include <iostream>
#include <string>
#include <vector>


using namespace std;

//библиотека стандартных шаблонов (stl)
//векор это прокаченный динамический массив. сам следит за выделением памяти, сам добавлюет, удаляет элементы и тд
//capacity(выделение места)




int main() {
	setlocale(LC_ALL, "RU");
	
	
	//vector<int> MyVector = {0, 1, 2, 3, 8}; // объявлять вектор можно как динамический массив
	vector<int> MyVector(5, 44); //при объявлении вектора сразу можно указать на сколько он элементов и задать всем им ОДНО значение

	MyVector.reserve(100); //изначально можно объявить сколько места нужно выделить под capacity
	MyVector.shrink_to_fit(); // освобождаем неиспользованную память == уменьшаем размерность вектора до фактического


	/*vector<int> MyVector;
	MyVector.push_back(6); 
	MyVector.push_back(5);
	MyVector.push_back(4);*/

	//cout << MyVector[10] << endl; //выход за пределы вектора как и в массивах(нельзя ну так делать)
	//MyVector.at(10) << endl; //можно использовать с try catch чтобы словить исключение. не даст выти за размерность вектора
	
	//MyVector[0] = 100; // заменяем элемент
	//MyVector.clear(); //очищаем весь вектор
	//MyVector.pop_back(); // удаляем последний элемент

	//	cout << MyVector.empty(); //если ветор не пустой вернёт 0


	for (int i = 0; i < MyVector.size(); i++) //все элементы выводим через цикл
	{
		cout << MyVector[i] << endl;
	}

	cout << "Количество элементов в векторе: " << MyVector.size() << endl;
	cout << "capacity вектора: " << MyVector.capacity() << endl;	//Вместимость вектора(сколько элементов он может в себя поместить)
						//capacity выделяется с запасом под новые элементы за исключением точного определения {}

	//MyVector.resize(10, 7); //"убедись что в векторе 10 элементов. если их меньше добавь до 10, добавленные равны 7"



	
	
	return 0;
}
